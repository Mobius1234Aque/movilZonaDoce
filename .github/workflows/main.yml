name: CI Pipeline

on:
  push:
    branches:
      - develop
      - 'feature/*'
      - 'hotfix/*'
  pull_request:
    branches:
      - develop
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['16.x', '18.x']
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: npm-cache-${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            npm-cache-${{ runner.os }}-node-${{ matrix.node-version }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm run test

  build:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # 1. Instalar EAS CLI y dependencias
      - name: Install dependencies
        run: |
          npm install --global eas-cli
          sudo apt-get update
          sudo apt-get install -y wget tar unzip lib32stdc++6 lib32z1

      # 2. Construir la APK con EAS y capturar la URL
      - name: Build APK for Android
        id: eas_build
        run: |
          npx eas-cli build --platform android --profile preview --non-interactive | tee build_log.txt
        env:
          EAS_TOKEN: ${{ secrets.EXPO_TOKEN }}

      # 3. Extraer la URL del APK desde el log
      - name: Extract APK URL
        run: |
          APK_URL=$(grep -o 'https://expo.dev/artifacts.*\.apk' build_log.txt)
          echo "APK URL: $APK_URL"
          echo "APK_URL=$APK_URL" >> $GITHUB_ENV

      # 4. Descargar la APK usando la URL extraída
      - name: Download APK
        run: |
          curl -o your-app.apk "$APK_URL"

  # Iniciar el emulador y ejecutar la APK
  emulator-and-run-apk:
    runs-on: ubuntu-latest
    needs: build  # Solo se ejecuta si el build fue exitoso
    steps:
      - name: Install Android SDK
        run: |
          sudo apt-get update
          sudo apt-get install -y wget tar unzip lib32stdc++6 lib32z1
          wget https://dl.google.com/android/repository/commandlinetools-linux-7302050_latest.zip
          mkdir -p "$ANDROID_HOME/cmdline-tools"
          unzip -q commandlinetools-linux-7302050_latest.zip -d "$ANDROID_HOME/cmdline-tools"
          yes | $ANDROID_HOME/cmdline-tools/bin/sdkmanager --licenses
          yes | $ANDROID_HOME/cmdline-tools/bin/sdkmanager "platform-tools" "platforms;android-30" "emulator" "system-images;android-30;google_apis;x86_64"
          $ANDROID_HOME/cmdline-tools/bin/sdkmanager --install "build-tools;30.0.3"

      # 5. Iniciar el emulador Android
      - name: Start Emulator
        run: |
          $ANDROID_HOME/emulator/emulator -list-avds
          $ANDROID_HOME/emulator/emulator -avd "system-images;android-30;google_apis;x86_64" -no-window -no-audio -no-boot-anim &
          adb wait-for-device
          adb shell input keyevent 82 # Unlock screen

      # 6. Instalar la APK en el emulador
      - name: Install APK on Emulator
        run: |
          adb install your-app.apk

      # 7. (Opcional) Ejecutar la aplicación o pruebas
      - name: Launch app on Emulator
        run: adb shell monkey -p com.example.yourapp -c android.intent.category.LAUNCHER 1


  notify:
    name: Send Email Notification
    runs-on: ubuntu-latest
    needs: [build, run-owasp-zap]
    if: failure() || success()
    steps:
      - name: Send email notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: Build ${{ job.status }}:${{ github.repository }}
          body: |
            The CI build has ${{ job.status }} for ${{ github.repository }}.
            Commit: ${{ github.sha }}
            Branch: ${{ github.ref }}
            Author: ${{ github.actor }}
          to: ${{ secrets.EMAIL_TO }}
          from: ${{ secrets.EMAIL_USERNAME }}
